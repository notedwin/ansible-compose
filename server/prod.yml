---
- name: Deploy services on linux server
  hosts: test
  gather_facts: false
  become: yes
  tasks:

    ------------------- SYSTEM BASICS ------------------------------------
    - name: Get env file content
      include_vars:
        file: env.yml
        name: env

     - name: Update package cache
      apt:
        upgrade: dist
        update_cache: yes

    - name: Install system packages
      apt:
        name:
          - python3
          - git
          - neovim
          - tmux
          - curl
        state: present

    - name: Pull Docker images
      docker_image:
        name: "{{ item }}"
        source: pull
        state: present
      loop:
        - postgres
        - portainer/portainer
        - grafana/grafana
        - linuxserver/code-server
        - adguard/adguardhome
        - caddy/caddy
        - ccrisan/motioneye:master-amd64
        - prom/node-exporter
    
    # docker system prune
    
     # - name: copy resume.pdf to server
    #   copy:
    #     src: ./resume.pdf
    #     dest: /resume/resume.pdf
    #     owner: root
    #     group: root
    #     mode: 0644
    #     force: yes

    - name: Copy Caddyfile
      copy:
        src: ./caddyfile
        dest: /home/notedwin/Caddyfile
        owner: root
        group: root
        mode: 0644
        force: yes
    
    - name: Copy caddy dockerfile
      copy:
        src: dockerfile
        dest: /home/notedwin/caddy/Dockerfile
        owner: notedwin
        group: notedwin
        mode: 0644
        force: yes
    
    - name: Build Docker image for Caddy if not exists
      docker_image:
        name: caddy-yuh
        source: build
        build:
          path: /home/notedwin

      # become_user: notedwin
      # command: docker build -t caddy-yuh /home/notedwin

    - name: Run Caddy docker container
      docker_container:
        user: root
        name: caddy
        # hostname: notedwin
        image: caddy-yuh
        state: started
        restart_policy: always
        network_mode: my_network
        ports:
          - "80:80"
          - "443:443"
          - "2019:2019"
        volumes:
          - /home/notedwin/Caddyfile:/etc/caddy/Caddyfile
          - /home/notedwin/caddy:/data
          - /home/notedwin/caddy:/config
          - /var/log/caddy/:/var/log/caddy/
          - /home/notedwin/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock
          - /resume/resume.pdf:/resume/resume.pdf
        
    - name: Run motioneye
      docker_container:
        name: motioneye
        image: ccrisan/motioneye:master-amd64
        state: started
        restart_policy: unless-stopped
        network_mode: my_network
        ports:
          - "8765:8765"
        volumes:
          /home/notedwin/motioneye:/etc/motioneye
          /home/notedwin/motioneye:/var/lib/motioneye
          /etc/localtime:/etc/localtime:ro

   

    # - name: add docker gpg key
    #   shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    # - name: add docker repo
    #   shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # - name: Update package cache
    #   apt:
    #     upgrade: dist
    #     update_cache: yes
    
    - name: Install Docker
      apt:
        name:
          - docker-ce 
          - docker-ce-cli 
          - containerd.io 
          - docker-buildx-plugin 
          - docker-compose-plugin
      

    - name: Enable Docker remote access
      lineinfile:
        path: /lib/systemd/system/docker.service
        regexp: '^ExecStart='
        line: 'ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock'
        backup: yes
      notify:
        - Restart Docker

    - name: Enabled passwordless sudo for {{item}}
      lineinfile:
        dest: /etc/sudoers
        regexp: "^wheel"
        line: '{{item }} ALL=(ALL) NOPASSWD:ALL'
        state: present
        validate: 'visudo -cf %s'
      loop: 
        - ansible
        - notedwin
        - docker
      
     - name: Suppress login message
      file:
        path: "/home/notedwin/.hushlogin"
        mode: 0644
        owner: notedwin
        group: notedwin
        modification_time: preserve
        access_time: preserve
        state: touch


          # - name: Run tailscale container
    #   docker_container:
    #     name: tailscale
    #     image: tailscale/tailscale
    #     state: started
    #     restart_policy: unless-stopped
    #     network_mode: host
    #     # add net_admin capability to the container
    #     capabilities:
    #       - net_admin
    #       - net_raw
    #     volumes:
    #       - /dev/net/tun:/dev/net/tun
    #       - /home/notedwin/tailscale/varlib:/var/lib
    #       # https://github.com/tailscale/tailscale/issues/6849
    #       # add volume for the tailscaled.sock to be present on the host system
    #       # that's where caddy goes to communicate with tailscale
    #       - /home/notedwin/tailscale:/tmp
    #     env:
    #       TS_AUTHKEY: tskey-auth-ktzwnn6CNTRL-14bCQYC6EZYpwtXzR7cJZYLf4wxY3rP1
    #       TS_STATE_DIR: /var/lib/tailscale
        # create a cert using docker exec
        # docker exec tailscaled tailscale --socket /tmp/tailscaled.sock cert <the server domain name>
        # then copy the cert to the host system

    # - name: Create tailscale cert
    #   shell: docker exec tailscale tailscale --socket /tmp/tailscaled.sock cert notedwin.cow-ghost.ts.net
    #   args:
    #     executable: /bin/bash

        # - name: Run a node exporter docker container
    #   docker_container:
    #     name: node_exporter
    #     image: prom/node-exporter
    #     state: started
    #     restart_policy: unless-stopped
    #     network_mode: my_network
    #     ports:
    #       - "9100:9100"
    #     volumes:
    #       - /proc:/host/proc:ro
    #       - /sys:/host/sys:ro
    #       - /:/rootfs:ro
    #     command: --path.procfs /host/proc --path.sysfs /host/sys --path.rootfs /rootfs --collector.filesystem.ignored-mount-points "^/(sys|proc|dev|host|etc)($$|/)"

    # - name: Copy Prometheus config file
    #   copy:
    #     src: ./prometheus.yml
    #     dest: /home/notedwin/prometheus/prometheus.yml
    #     owner: notedwin
    #     group: notedwin
    #     mode: 0644
    #     force: yes

    # - name: Run Prometheus docker container
    #   docker_container:
    #     name: prometheus
    #     image: prom/prometheus
    #     user: root
    #     state: started
    #     restart_policy: unless-stopped
    #     network_mode: my_network
    #     ports:
    #       - "9090:9090"
    #     volumes:
    #       - /home/notedwin/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    #       - /home/notedwin/prometheus/data:/prometheus
    #     command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles

  handlers:
    - name: Restart Docker
      service:
        name: docker
        state: restarted